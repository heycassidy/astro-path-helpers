import type { IntegrationResolvedRoute } from "astro"
import {
  buildHelperName,
  buildHelperParams,
  buildHelperPath,
} from "./builders.ts"
import type { HelperRouteMap } from "./types.ts"

/**
 * Generates the source code for all path helpers based on the provided routes.
 *
 * @param {HelperRouteMap} routes - A map of route definitions.
 * @param {boolean} addTrailingSlash - Whether to add a trailing slash to the generated paths.
 * @returns {string} The generated source code as a string.
 */
export function generatePathHelpers(
  routes: HelperRouteMap,
  addTrailingSlash: boolean,
): string {
  const lines: string[] = [
    "// This file is auto-generated by astro-path-helpers",
    "// Do not edit manually",
    "",
  ]

  for (const route of routes.values()) {
    const [name, params, path] = getHelperParts(route)

    const hasParams = params.length > 0
    const quoteCharacter = hasParams ? "`" : '"'

    lines.push(`export function ${name}(${params}): string {`)
    lines.push(
      `  return ${quoteCharacter}${path}${addTrailingSlash ? "/" : ""}${quoteCharacter};`,
    )
    lines.push("}")
    lines.push("")
  }

  return lines.join("\n")
}

/**
 * Generates TypeScript declaration source for all path helpers based on the provided routes.
 *
 * @param {HelperRouteMap} routes - A map of route definitions.
 * @returns {string} The TypeScript declaration content as a string.
 */
export function generateTypeDeclarations(routes: HelperRouteMap): string {
  const lines: string[] = [
    "// This file is auto-generated by astro-path-helpers",
    "// Do not edit manually",
    "",
    "declare module 'astro-path-helpers' {",
    "",
  ]

  for (const route of routes.values()) {
    const [name, params] = getHelperParts(route)

    lines.push(`  export function ${name}(${params}): string`)
    lines.push("")
  }

  lines.push("}")

  return lines.join("\n")
}

/**
 * Retrieves the components needed to generate a route helper function.
 *
 * This function returns an array of strings containing:
 * 1. The helper name (e.g. "userPath")
 * 2. The helper parameter list (e.g. "userId: string")
 * 3. The dynamic path that the helper will return (e.g. "`/users/${userId}`")
 *
 * @param {IntegrationResolvedRoute} route - The route to generate helper parts for
 * @returns {string[]} Array containing the helper function name, parameters, and path generation code
 */
export function getHelperParts(route: IntegrationResolvedRoute): string[] {
  return [
    buildHelperName(route),
    buildHelperParams(route),
    buildHelperPath(route),
  ]
}
