import type { IntegrationResolvedRoute } from "astro"

import type { HelperRouteMap } from "../types.ts"
import {
  getHelperNameFromParts,
  getHelperParamsFromParts,
  getHelperReturnPathFromSegments as getHelperReturnPathFromParts,
} from "./helpers.ts"

/**
 * Generates the source code for all path helper functions based on the provided routes.
 *
 * @param {HelperRouteMap} routes - A map of route definitions.
 * @returns {string} The generated helper function source code as a string.
 */
export function generatePathHelpers(routes: HelperRouteMap): string {
  const lines: string[] = [
    "// This file is auto-generated by astro-path-helpers",
    "// Do not edit manually",
    "",
  ]

  for (const route of routes.values()) {
    lines.push(...getPathHelper(route))
  }

  return lines.join("\n")
}

/**
 * Generates TypeScript declaration source for all helper functions.
 *
 * @param {HelperRouteMap} routes - A map of route definitions.
 * @returns {string} The TypeScript declaration content as a string.
 */
export function generateTypeDeclarations(routes: HelperRouteMap): string {
  const lines: string[] = [
    "// This file is auto-generated by astro-path-helpers",
    "// Do not edit manually",
    "",
    "declare module 'astro-path-helpers' {",
    "",
  ]

  for (const route of routes.values()) {
    lines.push(...getTypeDeclaration(route))
  }

  lines.push("}")

  return lines.join("\n")
}

function getPathHelper(route: IntegrationResolvedRoute): string[] {
  const lines: string[] = []

  // Flatten segments to just parts since we don't support multi-part segments
  const parts = route.segments.flat()

  const params = getHelperParamsFromParts(parts)

  const functionName = getHelperNameFromParts(parts)
  const functionReturnStatement = getHelperReturnPathFromParts(parts, params)

  const functionParams = params.map((param) => `${param}: string`).join(", ")

  lines.push(`export function ${functionName}(${functionParams}): string {`)
  lines.push(functionReturnStatement)
  lines.push("}")
  lines.push("")

  return lines
}

function getTypeDeclaration(route: IntegrationResolvedRoute): string[] {
  const lines: string[] = []

  // Flatten segments to just parts since we don't support multi-part segments
  const parts = route.segments.flat()

  const functionName = getHelperNameFromParts(parts)
  const params = getHelperParamsFromParts(parts)
  const functionParams = params.map((param) => `${param}: string`).join(", ")

  lines.push(`  export function ${functionName}(${functionParams}): string`)
  lines.push("")

  return lines
}
